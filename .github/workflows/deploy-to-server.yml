name: "Deploy on Server"

on:
  push:
    branch:
      - "master"
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     pytest

      - uses: actions/checkout@v3

      - name: "Build deployment code for standalone"
        env:
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_port: ${{ secrets.DEPLOY_PORT }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}
          env_file: ${{ secrets.ENV_FILE }}
          client_secret_file: ${{ secrets.CLIENT_SECRET_FILE }}
          local_dir: "."
          remote_dir: "/home/${{ secrets.DEPLOY_USER }}/chat_api"
        run: |
          mkdir ~/.ssh
          echo "$remote_key" > ~/.ssh/id_github
          chmod 600 ~/.ssh/id_github
          echo "$env_file" > ./config/.env
          chmod 600 ./config/.env
          echo "$client_secret_file" > ./app/client_secret.json
          rsync -avzr --delete -e "ssh -p ${remote_port} -i ~/.ssh/id_github -o StrictHostKeyChecking=no" ${local_dir} ${remote_user}@${remote_host}:${remote_dir}
          rm ~/.ssh/id_github

      - name: Running docker via remote ssh
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script_stop: true
          script: |
            docker compose -f ~/chat_api/compose.yml down
            docker compose -f ~/chat_api/compose.yml build
            docker compose -f ~/chat_api/compose.yml --env-file ~/chat_api/config/.env up -d